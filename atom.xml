<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>IRonMan-allwona</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-13T09:57:42.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Allwona</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue-cli快速搭建vue项目</title>
    <link href="http://yoursite.com/2018/03/02/vue-cli/"/>
    <id>http://yoursite.com/2018/03/02/vue-cli/</id>
    <published>2018-03-02T12:23:45.000Z</published>
    <updated>2018-03-13T09:57:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>vue-cli又名vue脚手架,主要包含了vue+vuex+vue-router+webpack<br>优点：能够让我们快速搭建起项目的架构，不用去过多关注某个插件的版本有更新，又需要做什么修改，基本的loader和webpack插件都已经安装好<br>缺点：会使项目变得很繁重，对于初学者来说配置文件不能随意改动</p><a id="more"></a><h2 id="安装NodeJs"><a href="#安装NodeJs" class="headerlink" title="安装NodeJs"></a>安装NodeJs</h2><p>nodejs的安装可以去我的<a href="http://allwona.com/2017/08/18/nodejs/" target="_blank" rel="noopener">nodejs总结</a>这篇文章中找到具体的安装方法,安装完node其实我们就可以使用npm来安装其他包了<br>npm是什么东东？npm其实是Node.js的包管理工具（package manager）。</p><h2 id="安装vue-cli"><a href="#安装vue-cli" class="headerlink" title="安装vue-cli"></a>安装vue-cli</h2><p>安装完了node，我们就可以正式开始vue脚手架，使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-cli</span><br></pre></td></tr></table></figure></p><p>命令安装,安装完成之后的文件目录结构大致如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">├── build</span><br><span class="line">├── config</span><br><span class="line">├── dist</span><br><span class="line">├── index.html</span><br><span class="line">├── node_modules</span><br><span class="line">├── package.json</span><br><span class="line">├── postcss.config.js</span><br><span class="line">├── src</span><br><span class="line">└── static</span><br></pre></td></tr></table></figure></p><p>如果是使用git服务器则需要添加.gitignore文件来过滤node_modules整个文件夹，不然整个提交会很长时间，也不利于同伴拉取代码</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vue-cli又名vue脚手架,主要包含了vue+vuex+vue-router+webpack&lt;br&gt;优点：能够让我们快速搭建起项目的架构，不用去过多关注某个插件的版本有更新，又需要做什么修改，基本的loader和webpack插件都已经安装好&lt;br&gt;缺点：会使项目变得很繁重，对于初学者来说配置文件不能随意改动&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>NodeJS 总结</title>
    <link href="http://yoursite.com/2017/08/18/nodejs/"/>
    <id>http://yoursite.com/2017/08/18/nodejs/</id>
    <published>2017-08-18T02:14:09.000Z</published>
    <updated>2018-03-02T12:46:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先<a href="https://nodejs.org/en/" target="_blank" rel="noopener">下载</a>NodeJS，安装</p><ol><li>Chrome其实本质上就是V8引擎，用来解析JS的客户端（浏览器）前端部分</li><li>Node其实就死系统上运行V8引擎，用来解析JS的服务端（系统）后端部分</li></ol><p>客户端 浏览器<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;!--以前一定要在浏览器中引入test。js，然后在浏览器打开执行--&gt;</span><br><span class="line">&lt;script src=<span class="string">"test.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure></p><p>服务端 系统环境<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node xxx.js</span><br></pre></td></tr></table></figure></p><p>可以省略<code>.js</code>后缀<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node test.js</span><br><span class="line"><span class="comment">//相当于</span></span><br><span class="line">node test</span><br></pre></td></tr></table></figure></p><p>如果test都是指定同一个端口，只能成功运行一个test.js</p><blockquote><p>nodejs是一个系统框架，专门实现把JS跑在浏览器以外的地方，nodejs其实就是用JS的语法</p></blockquote><p>ctrl + c 退出命令</p><a id="more"></a><h2 id="模块系统"><a href="#模块系统" class="headerlink" title="模块系统"></a>模块系统</h2><p>理解为就是类似前端的<code>require.js</code></p><table><thead><tr><th>require.js</th><th>node.js</th></tr></thead><tbody><tr><td>define</td><td>exports</td></tr><tr><td>require</td><td>require</td></tr></tbody></table><p>前端里面<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"method.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">"test.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>methods.js模块<br>export导出模块 类似以前require.js的define方法，导出对象，数字，字符串，数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">exports.func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">name: <span class="string">"abc"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">exports.name = <span class="string">"laoxie"</span></span><br></pre></td></tr></table></figure></p><p>require导入模块 跟require的require方法类似，导出是一个对象</p><p>export指向module.export，module.export指向一个空对象，export方法就是依赖于module.export<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> = <span class="built_in">module</span>.export = &#123;&#125;<span class="comment">//module.export的指向是不能被改变的</span></span><br><span class="line"><span class="keyword">export</span> = <span class="built_in">module</span>.export = &#123;<span class="attr">name</span>:<span class="string">"wscats"</span>&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">"./method.js"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(b)<span class="comment">//object</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">name: &quot;wscats&quot;,</span><br><span class="line">add: function(a, b) &#123;</span><br><span class="line">return a + b;</span><br><span class="line">&#125;,</span><br><span class="line">sub: function(a, b) &#123;</span><br><span class="line">return a - b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;//这种写法了先创建对象(指针就改变了)，然后赋属性值</span><br><span class="line">module.exports.name = &quot;wscats&quot;,//module.exports原本就是一个对象，往自己对象上添加属性值</span><br><span class="line">exports.name = &quot;wscats&quot;</span><br></pre></td></tr></table></figure><h2 id="区分模块"><a href="#区分模块" class="headerlink" title="区分模块"></a>区分模块</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//jq相当于第三模块</span></span><br><span class="line">&lt;script src=<span class="string">"jquery.js"</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="comment">//相当于自定义模块</span></span><br><span class="line">&lt;script src=<span class="string">"method.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">"test.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol><li><strong>自定义模块</strong> 自己封装的方法</li><li><strong>第三方模块</strong> 别人写好的模块(就是从NPM下载的模块) 比如gulp</li><li><strong>内置模块</strong> nodejs自带的模块(不用下载，就是存在nodejs内部的模块)</li></ol><h2 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h2><p>NPM就是模块应用市场,就是其他开发者开发好的模块把它上传到NPM管理中心，提供给我们安装使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install XXX(模块名)</span><br><span class="line">npm uninstall XXX(卸载)</span><br></pre></td></tr></table></figure></p><p>如果不知道模块如何用，在这里查找<br><a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm模块管理中心</a></p><h2 id="内置模块"><a href="#内置模块" class="headerlink" title="内置模块"></a>内置模块</h2><p><a href="http://nodejs.cn/api" target="_blank" rel="noopener">查找nodejs模块的文档</a></p><p>内置模块:http,os,path,url<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"./http.js"</span>)<span class="comment">//自定义模块</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">"http"</span>)<span class="comment">//内置模块</span></span><br></pre></td></tr></table></figure></p><table><thead><tr><th>状态码</th><th></th></tr></thead><tbody><tr><td>100</td><td></td></tr><tr><td>2xx</td><td>请求成功</td></tr><tr><td>3xx</td><td>重定向</td></tr><tr><td>4xx</td><td>客户端错误</td></tr><tr><td>5xx</td><td>服务端错误</td></tr></tbody></table><h2 id="创建服务器"><a href="#创建服务器" class="headerlink" title="创建服务器"></a>创建服务器</h2><h3 id="http"><a href="#http" class="headerlink" title="http"></a>http</h3><ol><li>引入require(“http”)内置http模块</li><li>用http模块的createServer方法创建服务器，createServer接受一个匿名的回调函数，这个匿名的回调函数，接受两个参数(request,response)</li><li>链式调用listen方法，把服务器放在对应端口号上监听</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入http内置模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="comment">//console.log(http)</span></span><br><span class="line"><span class="comment">//用createServer创建服务器</span></span><br><span class="line"><span class="comment">//request请求</span></span><br><span class="line"><span class="comment">//response相应</span></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request,response</span>)</span>&#123;</span><br><span class="line"><span class="comment">//相应结果显示浏览器上</span></span><br><span class="line">response.end(<span class="string">"Hello World"</span>);</span><br><span class="line">&#125;).listen(<span class="number">12345</span>)</span><br><span class="line"><span class="comment">//端口号有范围限制0~65535</span></span><br></pre></td></tr></table></figure><p>注意点：是否跨域，每次修改完代码，记得重新用node执行后端.js文件<br>请求的地方是指向xxx.js执行后的域名和端口号，nodejs跑一个http.js(代替了php+apache)</p><table><thead><tr><th>php</th><th>nodejs</th></tr></thead><tbody><tr><td><code>header(&quot;Access-Control-Allow-Origin:*&quot;);</code></td><td><code>response.setHeader(&quot;Access-Control-Allow-Origin&quot;,&quot;*&quot;)</code></td></tr><tr><td><code>echo xxx;</code></td><td><code>response.end(&quot;xxx&quot;)</code></td></tr><tr><td>Apache解析</td><td>Node(V8)解析</td></tr><tr><td>PHP</td><td>JS</td></tr><tr><td>$_GET[“xxx”]</td><td>var paramStr  = url.parse(request.url).query;var param = querystring.parse(paramStr);//记得引入url和querystring模块</td></tr><tr><td>打开(wamp)apche服务器，直接请求.php，放在你们的wamp,www文件里面</td><td>放在任何地方，但是要用node执行，然后访问对应端口</td></tr><tr><td>$_POST[“xxx”]</td><td><code>var post = &quot;&quot;;request.on(&quot;data&quot;, function(chunk) {post += chunk;})request.on(&quot;end&quot;, function() {console.log(querystring.parse(post));response.end(&quot;b&quot;);})</code></td></tr></tbody></table><h3 id="url"><a href="#url" class="headerlink" title="url"></a>url</h3><p><strong>url</strong>模块提供了一些实用函数，用于URL处理与解析<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>);</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(request.url);//http://localhost:12345/index.html/?name=laoxie&amp;skill=js</span><br><span class="line">//把我们参数部分截取出来</span><br><span class="line">var paramStr  = url.parse(request.url).query;//name=laoxie&amp;skill=js</span><br></pre></td></tr></table></figure><h3 id="querystring"><a href="#querystring" class="headerlink" title="querystring"></a>querystring</h3><p><strong>querystring</strong>模块提供了一些实用工具，用于解析与格式化URL查询字符串<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> param = querystring.parse(paramStr);<span class="comment">//&#123;name:"laoxie",skill:"js"&#125;</span></span><br><span class="line">param.name / param[<span class="string">"name"</span>]</span><br></pre></td></tr></table></figure><h2 id="获取GET请求"><a href="#获取GET请求" class="headerlink" title="获取GET请求"></a>获取GET请求</h2><p>是通过url和querystring模块去实现的</p><h2 id="获取post请求"><a href="#获取post请求" class="headerlink" title="获取post请求"></a>获取post请求</h2><p>利用<code>request.on()</code>方法监听post请求头的数据，然后监听请求结束，再去把整个请求头部分作为字符串处理<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> post = <span class="string">""</span>;</span><br><span class="line">request.on(<span class="string">"data"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">post += chunk;</span><br><span class="line">&#125;)</span><br><span class="line">request.on(<span class="string">"end"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(post)<span class="comment">//name=laoxie&amp;skill=PS&amp;age=18</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>配合querystring模块把字符串处理成我们需要的对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">querystring.parse(post)</span><br></pre></td></tr></table></figure></p><h2 id="获取jsonp请求"><a href="#获取jsonp请求" class="headerlink" title="获取jsonp请求"></a>获取jsonp请求</h2><p>jQ的方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">url: <span class="string">"http://localhost:12345"</span>,</span><br><span class="line">type: <span class="string">"get"</span>,</span><br><span class="line">dataType: <span class="string">"jsonp"</span>,</span><br><span class="line">jsonpCallback: <span class="string">"JSON_CALLBACK"</span>,</span><br><span class="line">success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>类似get请求把参数放在url上，也是通过querystring和url模块去获取jsonp的参数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> paramStr = url.parse(request.url).query;</span><br><span class="line"><span class="keyword">var</span> param = querystring.parse(paramStr);</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">news:[&#123;</span><br><span class="line">title:<span class="string">"adasdasd"</span>,</span><br><span class="line">content:<span class="string">"asdasdasdasd"</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">title:<span class="string">"ask大神可点击"</span>,</span><br><span class="line">content:<span class="string">"几点啦数据方是否"</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">title:<span class="string">"方块开发开发曼妮芬"</span>,</span><br><span class="line">content:<span class="string">"去请求二翁"</span></span><br><span class="line">&#125;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解决跨域</span></span><br><span class="line">response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>,<span class="string">"*"</span>);</span><br><span class="line"><span class="comment">//相应结果显示浏览器上</span></span><br><span class="line">response.end(param[<span class="string">"callback"</span>]+<span class="string">"("</span>+<span class="built_in">JSON</span>.stringify(obj)+<span class="string">")"</span>);</span><br></pre></td></tr></table></figure></p><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><p><a href="https://www.npmjs.com/package/mysql" target="_blank" rel="noopener">mysql模块文档</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mysql</span><br></pre></td></tr></table></figure><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">"mysql"</span>);</span><br></pre></td></tr></table></figure><h3 id="配置连接的对比"><a href="#配置连接的对比" class="headerlink" title="配置连接的对比"></a>配置连接的对比</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//php</span></span><br><span class="line">$con = mysql_connect(<span class="string">"localhost"</span>,<span class="string">"laoxie"</span>,<span class="string">"12345678"</span>);</span><br><span class="line">mysql_select_db(<span class="string">"asm"</span>, $con);</span><br><span class="line"></span><br><span class="line"><span class="comment">//nodejs</span></span><br><span class="line"><span class="keyword">var</span> connection = mysql.createConnection(&#123;</span><br><span class="line">host: <span class="string">'localhost'</span>,</span><br><span class="line">user: <span class="string">'laoxie'</span>,</span><br><span class="line">password: <span class="string">'12345678'</span>,</span><br><span class="line">database: <span class="string">'asm'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//php</span></span><br><span class="line">mysql_select_db(<span class="string">"asm"</span>, $con);</span><br><span class="line"></span><br><span class="line"><span class="comment">//nodejs</span></span><br><span class="line">connection.connect();</span><br></pre></td></tr></table></figure><h3 id="执行sql语句"><a href="#执行sql语句" class="headerlink" title="执行sql语句"></a>执行sql语句</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//php</span></span><br><span class="line">$result = mysql_query(<span class="string">"SELECT * FROM news"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//nodejs</span></span><br><span class="line">connection.query(<span class="string">'SELECT title FROM news'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error, results, fields</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'The solution is: '</span>, results);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="关闭数据库"><a href="#关闭数据库" class="headerlink" title="关闭数据库"></a>关闭数据库</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql_close($con);</span><br><span class="line"></span><br><span class="line">connection.end();</span><br></pre></td></tr></table></figure><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>url上的某个决定去向的参数</p><p>比如如果url是<code>http://localhost:12345/aaaaaa.jpg?name=asdasd&amp;skill=ps</code></p><p>router路由就是<code>/aaaaaa.jpg</code></p><p>hash哈希值就是<code>?name=asdasd&amp;skill=ps</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>)</span><br><span class="line">url.parse(request.url).pathname</span><br></pre></td></tr></table></figure></p><h3 id="前端路由"><a href="#前端路由" class="headerlink" title="前端路由"></a>前端路由</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//item.taobao.com/item.htm?spm=a217h.8239130.618660.15.sWoK9Y&amp;id=537784299404</span></span><br><span class="line"></span><br><span class="line">前端路由 /item.htm</span><br><span class="line">哈希值 ?spm=a217h<span class="number">.8239130</span><span class="number">.618660</span><span class="number">.15</span>.sWoK9Y&amp;id=<span class="number">537784299404</span></span><br><span class="line"></span><br><span class="line">前端路由就是决定我们进去那一类型页面</span><br><span class="line">哈希值决定该类型页面呈现的具体内容</span><br></pre></td></tr></table></figure><h3 id="后端路由"><a href="#后端路由" class="headerlink" title="后端路由"></a>后端路由</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//localhost:12345/test?name=laoxie&amp;skill=ps</span></span><br><span class="line"></span><br><span class="line">后端路由/test</span><br><span class="line">哈希值 ?name=laoxie&amp;skill=ps</span><br><span class="line"></span><br><span class="line">后端路由就是决定我们后端做那一类型逻辑</span><br><span class="line">哈希值决定用那些值处理该逻辑</span><br></pre></td></tr></table></figure><h2 id="bootstrap"><a href="#bootstrap" class="headerlink" title="bootstrap"></a>bootstrap</h2><p>响应式框架<br><a href="http://www.bootcss.com/" target="_blank" rel="noopener">bootstrap下载</a></p><h3 id="栅格系统"><a href="#栅格系统" class="headerlink" title="栅格系统"></a>栅格系统</h3><p>12格<br>比如 1:1的就是 6+6=12<br>比如3:1的就是9+3=12</p><h3 id="可视化布局"><a href="#可视化布局" class="headerlink" title="可视化布局"></a>可视化布局</h3><p><a href="http://www.layoutit.cn/v3/index.html" target="_blank" rel="noopener">可视化布局</a></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>引入bootstrap.css然后，从官网中拷贝html部分过来页面上<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/bootstrap.css"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="W3C"><a href="#W3C" class="headerlink" title="W3C"></a>W3C</h3><p><a href="https://www.w3cschool.cn/nodejs/" target="_blank" rel="noopener">W3C</a></p><h2 id="express框架"><a href="#express框架" class="headerlink" title="express框架"></a>express框架</h2><p>框架跟库的区别</p><p>框架&gt;库</p><p>1.框架： 打仗的阵容，出兵的方式（战术，战略）<br>2.库： 火枪，马，盾牌</p><ol><li>可以设置中间件来响应 HTTP 请求。</li><li>定义了路由表用于执行不同的 HTTP 请求动作。</li><li>可以通过向模板传递参数来动态渲染 HTML页面(跟前后端分离的思想所违背)</li></ol><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><p><a href="https://expressjs.com/zh-cn/" target="_blank" rel="noopener">expressjs中文文档</a></p><p><a href="https://www.npmjs.com/package/express" target="_blank" rel="noopener">npm express</a></p><p><a href="https://www.w3cschool.cn/nodejs/nodejs-express-framework.html" target="_blank" rel="noopener">w3c express</a></p><p>是要get请求并且匹配到路由<code>/</code>，我就执行回调，并用<code>res.send</code>方法去相应结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(&apos;/&apos;, function(req, res) &#123;</span><br><span class="line">res.send(&apos;Hello World&apos;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.static(<span class="string">'public'</span>));</span><br></pre></td></tr></table></figure><h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.set(<span class="string">'views'</span>, <span class="string">'./views'</span>);</span><br><span class="line"><span class="comment">//view engine：要使用的模板引擎。例如：</span></span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'jade'</span>)</span><br></pre></td></tr></table></figure><h3 id="body-parser"><a href="#body-parser" class="headerlink" title="body-parser"></a>body-parser</h3><p>express没有帮我们处理post请求的数据，我们需要借助于body-parser去处理post的数据<br><a href="https://www.npmjs.com/package/body-parser" target="_blank" rel="noopener">body-parser</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//npm install body-parser</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;)</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;))</span><br><span class="line">// parse application/json </span><br><span class="line">app.use(bodyParser.json())</span><br></pre></td></tr></table></figure></p><h3 id="multer"><a href="#multer" class="headerlink" title="multer"></a>multer</h3><p>实现文件上传<br><a href="https://www.npmjs.com/package/multer" target="_blank" rel="noopener">multer npm</a></p><p><a href="https://github.com/expressjs/multer/blob/master/doc/README-zh-cn.md" target="_blank" rel="noopener">multer 中文</a></p><p><a href="https://github.com/Wscats/node-tutorial/tree/master/uploadFiles" target="_blank" rel="noopener">multer</a></p><h3 id="zeptojs"><a href="#zeptojs" class="headerlink" title="zeptojs"></a>zeptojs</h3><p><a href="http://www.css88.com/doc/zeptojs_api/" target="_blank" rel="noopener">zeptojs</a></p><h3 id="淘宝镜像"><a href="#淘宝镜像" class="headerlink" title="淘宝镜像"></a>淘宝镜像</h3><p><a href="http://npm.taobao.org/" target="_blank" rel="noopener">淘宝镜像</a><br>安装成功之后，就可以在命令行多一个cnpm命令，以后就可以用cnpm来代替npm命令<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https:<span class="comment">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure></p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>body-parser</td><td>node.js 中间件，用于处理 JSON, Raw, Text 和 URL 编码的数据</td></tr><tr><td>cookie-parser</td><td>这就是一个解析Cookie的工具。通过req.cookies可以取到传过来的cookie，并把它们转成对象</td></tr><tr><td>multer</td><td>node.js 中间件，用于处理 enctype=”multipart/form-data”（设置表单的MIME编码）的表单数据</td></tr></tbody></table><h3 id="FS文件系统"><a href="#FS文件系统" class="headerlink" title="FS文件系统"></a>FS文件系统</h3><p>内置的fs模块,文件的读取、写入、更名、删除、遍历<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>)</span><br></pre></td></tr></table></figure></p><p>有sync的就是同步，没有就是异步<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fs.readFileSync()<span class="comment">//同步</span></span><br><span class="line">fs.readFile()<span class="comment">//异步</span></span><br></pre></td></tr></table></figure></p><p>写入文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fs.writeFile()</span><br><span class="line">fs.writeFileSync()</span><br></pre></td></tr></table></figure></p><h2 id="PHP-NodeJS-前端"><a href="#PHP-NodeJS-前端" class="headerlink" title="PHP+NodeJS+前端"></a>PHP+NodeJS+前端</h2><p>借助自己的服务器，访问别人的服务器获得数据到自己服务器，再向自己服务器获取数据，从而解决跨域，因为服务器之间没有跨域，</p><p>PHP服务器代理<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$text = file_get_contents(<span class="string">"http://www.tuling123.com/openapi/api?key=c75ba576f50ddaa5fd2a87615d144ecf&amp;info=%E8%AE%B2%E4%B8%AA%E7%AC%91%E8%AF%9D"</span>);</span><br><span class="line"><span class="keyword">echo</span> $text;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>NodeJS服务器代理</p><p>利用http模块的<code>http.request</code>方法实现服务器代理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">var http = require(&quot;http&quot;);</span><br><span class="line">//node代理</span><br><span class="line">//http://www.tuling123.com/openapi/api?key=c75ba576f50ddaa5fd2a87615d144ecf&amp;info=%E8%AE%B2%E4%B8%AA%E7%AC%91%E8%AF%9D</span><br><span class="line">//console.log(http)</span><br><span class="line">console.log(&quot;start1&quot;);</span><br><span class="line">http.request(&#123;</span><br><span class="line">hostname: &apos;www.tuling123.com&apos;,</span><br><span class="line">port: &apos;80&apos;,</span><br><span class="line">path: &apos;/openapi/api?key=c75ba576f50ddaa5fd2a87615d144ecf&amp;info=%E8%AE%B2%E4%B8%AA%E7%AC%91%E8%AF%9D&apos;,</span><br><span class="line">method: &apos;GET&apos;</span><br><span class="line">&#125;, function(res) &#123;</span><br><span class="line">//res.setEncoding(&apos;utf8&apos;);</span><br><span class="line">console.log(&quot;start2&quot;);</span><br><span class="line">var data = &quot;&quot;;</span><br><span class="line">res.on(&apos;data&apos;, function(chunk)&#123;</span><br><span class="line">data += chunk</span><br><span class="line">&#125;);</span><br><span class="line">res.on(&apos;end&apos;, function()&#123;</span><br><span class="line">console.log(&quot;success&quot;)</span><br><span class="line">console.log(data);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;).on(&apos;error&apos;, function(e) &#123;</span><br><span class="line">console.log(&apos;problem with request: &apos; + e.message);</span><br><span class="line">&#125;).end();</span><br></pre></td></tr></table></figure></p><p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">http.get(<span class="string">"http://www.tuling123.com/openapi/api?key=c75ba576f50ddaa5fd2a87615d144ecf&amp;info=%E8%AE%B2%E4%B8%AA%E7%AC%91%E8%AF%9D"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> data = <span class="string">""</span>;</span><br><span class="line">res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">data += chunk</span><br><span class="line">&#125;)</span><br><span class="line">res.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上下两端代码是一样的，http.get本质就是调用http.request的get方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="comment">//node代理</span></span><br><span class="line"><span class="comment">//http://www.tuling123.com/openapi/api?key=c75ba576f50ddaa5fd2a87615d144ecf&amp;info=%E8%AE%B2%E4%B8%AA%E7%AC%91%E8%AF%9D</span></span><br><span class="line">http.request(&#123;</span><br><span class="line">hostname: <span class="string">'localhost'</span>,</span><br><span class="line">port: <span class="string">'81'</span>,</span><br><span class="line">path: <span class="string">'/1702/nodedemo/test.php?name=laoxie'</span>,</span><br><span class="line">method: <span class="string">'GET'</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">res.setEncoding(<span class="string">'utf8'</span>);</span><br><span class="line"><span class="keyword">var</span> data = <span class="string">""</span>;</span><br><span class="line">res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>)</span>&#123;</span><br><span class="line">data += chunk</span><br><span class="line">&#125;);</span><br><span class="line">res.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//console.log("success")</span></span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;).on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'problem with request: '</span> + e.message);</span><br><span class="line">&#125;).end();</span><br></pre></td></tr></table></figure></p><h2 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h2><p>cheerio模块，后端的jQ</p><h2 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h2><p>ajax短连接</p><p>websocket长连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//创建一个服务器</span><br><span class="line">var http = require(&quot;http&quot;);</span><br><span class="line">var app = http.createServer(function(req,res)&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var ioFn = require(&quot;socket.io&quot;);</span><br><span class="line">//实例化服务器，让它支持websocket</span><br><span class="line">var io = ioFn(app);</span><br><span class="line">//跟前端进行连接</span><br><span class="line">io.on(&quot;connection&quot;,function(socket)&#123;</span><br><span class="line">//前端跟后端联系的一个重要对象 发送消息的名字 发送消息的内容</span><br><span class="line">socket.emit(&quot;test&quot;,&quot;&quot;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socket.emit(<span class="string">"消息名字"</span>,<span class="string">"消息内容"</span>)</span><br></pre></td></tr></table></figure><h2 id="百度地图"><a href="#百度地图" class="headerlink" title="百度地图"></a>百度地图</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先&lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;下载&lt;/a&gt;NodeJS，安装&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Chrome其实本质上就是V8引擎，用来解析JS的客户端（浏览器）前端部分&lt;/li&gt;
&lt;li&gt;Node其实就死系统上运行V8引擎，用来解析JS的服务端（系统）后端部分&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;客户端 浏览器&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;head&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;meta charset=&lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/head&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;	&amp;lt;body&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;	&amp;lt;/&lt;/span&gt;body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;!--以前一定要在浏览器中引入test。js，然后在浏览器打开执行--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;script src=&lt;span class=&quot;string&quot;&gt;&quot;test.js&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/html&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;服务端 系统环境&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;node xxx.js&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以省略&lt;code&gt;.js&lt;/code&gt;后缀&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;node test.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//相当于&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node test&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果test都是指定同一个端口，只能成功运行一个test.js&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;nodejs是一个系统框架，专门实现把JS跑在浏览器以外的地方，nodejs其实就是用JS的语法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ctrl + c 退出命令&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Angular1x MVC框架</title>
    <link href="http://yoursite.com/2017/08/18/angular/"/>
    <id>http://yoursite.com/2017/08/18/angular/</id>
    <published>2017-08-18T02:14:09.000Z</published>
    <updated>2018-03-02T12:47:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>自己从项目中获取的经验，欢迎大家提意见，相互学习，在用angular写项目的时候，通常会将controller,directive,filter,service,route分别定义成相应的模块，分成5个js文件来写，方便我们进行维护,<br><a href="https://docs.angularjs.org/api" target="_blank" rel="noopener">查看官方文档</a></p><h2 id="angular基础"><a href="#angular基础" class="headerlink" title="angular基础"></a>angular基础</h2><table><thead><tr><th>控制器</th><th>指令/组件</th><th>过滤器</th><th>服务</th><th>路由</th><th>脏检测机制</th><th>双向数据绑定</th><th>依赖注入</th><th>表达式</th></tr></thead><tbody><tr><td>controller</td><td>directive</td><td>filter</td><td>service</td><td>route</td><td>dirty check</td><td>data binding</td><td>dependency injection</td><td>在指令中不需要使用<code>{</code>{ }<code>}</code>表达式，指令中的变量直接写，加单引号则表示字符</td></tr></tbody></table><a id="more"></a><h3 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = angular.module(<span class="string">'ngApp'</span>,[<span class="string">'ui.router'</span>]);</span><br><span class="line"><span class="comment">// 通过$state来传参</span></span><br><span class="line">app.controller(<span class="string">'detailCtrl'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$state</span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log($state);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>一个程序只需要一个控制器就好了，需要注意$scope只能注入控制器中，其他任何地方都没法注入$scope，采用组件化开发的时候，可以完全抛弃使用控制器，因为在link:function(scope,ele,attr)中，可以通过scope来定义自己的方法</p><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><h4 id="常用的内置指令"><a href="#常用的内置指令" class="headerlink" title="常用的内置指令"></a>常用的内置指令</h4><table><thead><tr><th>常用的控制器</th><th>用法</th><th>注意</th></tr></thead><tbody><tr><td>ng-init</td><td>ng-init=”value”</td><td>主要用来初始化数据，给控制添加初始值</td></tr><tr><td>ng-app</td><td>ng-app=”模块名”</td><td>用来声明主模块，一般一个网站或者app一个主模块就够了</td></tr><tr><td>ng-controller</td><td>ng-controller=”控制器名”</td><td>声明一个控制器的作用域，一个主模块中可以有多个控制器，一般来说有一个控制器也就可以了</td></tr><tr><td>ng-click</td><td>ng-click=”click()” 绑定一个自定义的函数，点击的时候执行这个函数</td><td>如果是事件委托时，需要在函数中传入$event，在自定义的函数中可以打印出e.target,再根据e.target来获取元素的属性，并操作节点的属性</td></tr><tr><td>ng-bind</td><td>ng-bind=”value” value可以为变量，也可以为字符串，数字，但不能为html结构</td><td>当为变量的时候，可以与ng-model中的变量进行绑定，达到双向数据绑定</td></tr><tr><td>ng-bind-html</td><td>ng-bind-html=”value(管道字符)html” value为一段html结构,通常配合自定义的html过滤器一起使用，防止跨域攻击</td><td>通过$sce.trustAsHtml(input)将html结构转成安全的html结构</td></tr><tr><td>ng-repeat</td><td>ng-repeat=”n in news” news为一个数组，n为数组中的项</td><td>通过$http向后端获取数据后，使用ng-repeat遍历数组，将数组中的每一项遍历到html结构中，渲染到页面，通常n为对象，如果出现报错，通常是要加上”n in news track by $index”,这是angular会识别到相同的数据，而无法遍历，$index就相当与创建了一个组件，具有唯一性,遍历的时候，可以通过$index来获取节点的索引值</td></tr><tr><td>ng-class/ng-style</td><td>ng-class=”{object}” object为属性名：布尔值的一对名值对，如果为true,则该节点拥有这个类，否则没有</td><td>object中的布尔值可以根据是否为自定义模板的名字，使不同组件拥有不同的模版,可以添加多个名值对</td></tr><tr><td>ng-src</td><td>ng-src=”value” value可以为一个真实路径，也可以为一个变量，或者字符串与变量的拼接，抑或是一个三元运算</td><td></td></tr><tr><td>ng-href</td><td>ng-href=”同上”</td><td><code>&lt;a href=&quot;#!/detail//&quot; class=&quot;weui-media-box weui-media-box_appmsg&quot;&gt;</code>根据路由来拼接进到不同的页面</td></tr><tr><td>ng-model</td><td>ng-model=”value” 通常是一个变量，可以为数字，字符串</td><td>这是angular中非常重要的一个指令与input,textarea和select标签一起使用，实现angular的双向数据绑定</td></tr><tr><td>ng-if</td><td>ng-if=”value” value可以为布尔值，也可以是一个三元运算，只要最后得到的为布尔值就可以，如果为true则删除整个节点</td><td>这个指令也可以用来diy组件的模版，根据自定义的模板名字，通常我会用channel来写模版的名字</td></tr><tr><td>ng-show</td><td>ng-show=”同上” 为true则显示节点，否则隐藏节点，不会删除节点</td><td>也可用来diy组将模板</td></tr><tr><td>ng-hide</td><td>ng-hide=”同上” 作用与ng-show相反</td><td>也可用来diy组件模版</td></tr><tr><td>ng-transclude</td><td>ng-transclude=”value” value为bool值，当为true时，则嵌入某段html结构</td></tr></tbody></table><h4 id="自定义指令-组件"><a href="#自定义指令-组件" class="headerlink" title="自定义指令/组件"></a>自定义指令/组件</h4><ul><li>自定义指令的写法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.directive(<span class="string">'ngColor'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> &#123;</span><br><span class="line">          link:<span class="function"><span class="keyword">function</span>(<span class="params">scope,ele,attr</span>)</span>&#123;</span><br><span class="line">               ele.css(<span class="string">'color'</span>,attr.ngColor);</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p>通常自定义的指令只会用到link，通过link来创建这个指令独有的方法，与节点绑定在一起，使节点拥有某个功能，例如滑动指令，ngTouch</p><ul><li>自定义组件的写法：组件需要有html模版，组件自己的方法，关于组件之间的通信后面会有专门板块详细讲到<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">app.directive(<span class="string">'xheader'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> &#123;</span><br><span class="line">          restrict:<span class="string">'ECMA'</span>, <span class="attr">E</span>:元素， C：类， M：注释， A：属性</span><br><span class="line">          replace:<span class="literal">true</span>/<span class="literal">false</span>, <span class="comment">// 一般都用false，这个用来指示是否显示相应的html结构</span></span><br><span class="line">          controller:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">              </span><br><span class="line">          &#125;,  <span class="comment">// 实现自己的控制域,实现diy组件模版</span></span><br><span class="line">          templateUrl:<span class="string">'url'</span>, <span class="comment">//将重复的html弄到一个html文件上，使得能够被复用，当html结构很庞大时，用这个方法会易于代码的维护</span></span><br><span class="line">          template:<span class="string">`&lt;div&gt;用es6字符串模版写入相应的html结构&lt;/div&gt;`</span>,  <span class="comment">// 要在外层包一个&lt;div&gt;&lt;/div&gt;</span></span><br><span class="line">          transclude:<span class="literal">true</span>/<span class="literal">false</span>,   <span class="comment">// 组件嵌入，在要嵌入的标签上加上ng-transclude,一般都为true,允许在html标签上嵌入新的标签，实现diy组件模版</span></span><br><span class="line">          link:<span class="function"><span class="keyword">function</span>(<span class="params">scope,ele,attr</span>)</span>&#123;</span><br><span class="line">               scope.name  <span class="comment">//可以获取到控制器的变量</span></span><br><span class="line">               ele <span class="comment">//可以使用angular内置的jQlite(jquery),使用jq的一些方法，这样实现的组件可以完全放弃C层控制器层</span></span><br><span class="line">               ele.css(<span class="string">'color'</span>,attr.color)  <span class="comment">// 根据标签中的属性值，可以高度定制化组件</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><h4 id="常用内置过滤器"><a href="#常用内置过滤器" class="headerlink" title="常用内置过滤器"></a>常用内置过滤器</h4><table><thead><tr><th>过滤器</th><th>用法</th><th>注意</th></tr></thead><tbody><tr><td>currency</td><td>currency:”￥” :3  如果有参数，则用:隔开，参数写在:后面</td><td>第一个参数代表金钱符号，美元用$，第二个参数表示精度，3指会保留3为小数</td></tr><tr><td>date</td><td>date: “yyyy/dd hh:mm:ss EEEE” y:年，M:月，d:日，h:时，m:分，s:秒</td><td>从后台获取到的事件格式可能会有:UTC时间/iso时间 UTC时间为一串数字，注意有毫秒跟秒的区别，iso时间格式为：2015-05-20TO3:56:16.887Z,可以通过es5方法date.parse()，转成我们熟悉的UTC时间再进行操作</td></tr><tr><td>uppercase/lowercase</td><td>uppercase 直接使用就可以了，没有参数</td><td>uppercase,将所有的字母变成大写，lowercase,将所有的字母变成小写</td></tr><tr><td>json</td><td>json 没有参数</td><td>转成json字符串</td></tr><tr><td>number</td><td>number:3</td><td>转成数字，参数是指几位数字写一个分隔</td></tr><tr><td>orderBy</td><td>orderBy:value:bool value表示一个变量，bool值为true时，将数据按一个顺序排列，当为false时，于true相反的顺序排列</td><td>用来做排序，同样要注意从后台获取的数据的类型，再进行相应的数据类型转换成想要的数据类型来排列,一般都是配合ng-repeat一起使用</td></tr><tr><td>filter</td><td>filter:{value:search} value指遍历对象的属性，search指输入框中输入的值，会根据输入的值去搜索，将对应的数据显示到页面上</td><td>用来做前端的搜索，正常是要搜索应该要需从后端去获取数据再写入页面，一般都是配合ng-repeat一起使用</td></tr></tbody></table><p>limitTo|limitTo:length:index length指数据的长度，index指从哪个位置开始|主要用来做简单的分页效果，一般都是配合ng-repeat一起使用|</p><h4 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> filters = angular.module(<span class="string">'filters'</span>, []);</span><br><span class="line">filters.filter(<span class="string">'html'</span>, [<span class="string">'$sce'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$sce</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> $sce.trustAsHtml(input);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;]); <span class="comment">//将html转成可以被信任html结构</span></span><br><span class="line">filters.filter(<span class="string">'toNum'</span>, [<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> (input+<span class="string">'000'</span>)*<span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;]); <span class="comment">//由于后台的获取的时间格式为字符串，将字符串转成数字</span></span><br></pre></td></tr></table></figure><p>这是我在项目用到的自定义的过滤器，过滤器中的第一个参数表示过滤器的名字，[‘$sce’,function($sce)]是避免在gulp压缩js文件时，将$sce简写掉，所以用数组的形式，让function去获取到前面的参数</p><h3 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h3><h4 id="内置服务"><a href="#内置服务" class="headerlink" title="内置服务"></a>内置服务</h4><table><thead><tr><th>内置服务</th><th>用法</th></tr></thead><tbody><tr><td>$scope</td><td>angular核心，一切的数据都需要$scope，在组件中只需要通过scope来定义</td></tr><tr><td>$http</td><td>angular定义的ajax请求服务，关于传参的问题，后面会详细讲到</td></tr><tr><td>$rootScope</td><td>用来定义全局变量，不同于$scope，定义的变量可以注入到其他的控制器或过滤器</td></tr><tr><td>$sce</td><td>安全服务</td></tr><tr><td>$location</td><td>通过这个服务可以获取到url上的路由值</td></tr><tr><td>$timeout/$interval</td><td>angular里面的延时器和定时器$timeout(function(){},1000)</td></tr><tr><td>$window</td><td></td></tr><tr><td>$document</td><td>$document[0].getElementById(“num”).style.color = “green” 使用时要加上索引</td></tr></tbody></table><h4 id="自定义服务"><a href="#自定义服务" class="headerlink" title="自定义服务"></a>自定义服务</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造器 单例对象</span></span><br><span class="line">app.service(<span class="string">"tool"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> a + b</span><br><span class="line">     &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//工厂模式</span></span><br><span class="line">app.factory(<span class="string">"tool2"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> &#123;</span><br><span class="line">          add: <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">               <span class="keyword">return</span> a + b</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;)</span><br><span class="line">app.provider(<span class="string">"skill"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> &#123;</span><br><span class="line">          $get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">               <span class="keyword">return</span> &#123;</span><br><span class="line">                    name: <span class="string">"ps"</span></span><br><span class="line">               &#125;</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 通常的写法，里面可以写入自己封装的各种方法</span></span><br><span class="line">app.service(<span class="string">"tool"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> &#123;</span><br><span class="line">          add: <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">               <span class="keyword">return</span> a + b</span><br><span class="line">          &#125;,</span><br><span class="line">          getQueryString: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">               <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^|&amp;)"</span> + name + <span class="string">"=([^&amp;]*)(&amp;|$)"</span>);</span><br><span class="line">               <span class="keyword">var</span> r = <span class="built_in">window</span>.location.search.substr(<span class="number">1</span>).match(reg);</span><br><span class="line">               <span class="keyword">if</span>(r != <span class="literal">null</span>) <span class="keyword">return</span> <span class="built_in">unescape</span>(r[<span class="number">2</span>]);</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">          &#125;,</span><br><span class="line">          setCookie: <span class="function"><span class="keyword">function</span>(<span class="params">name, value</span>) </span>&#123;</span><br><span class="line">               <span class="keyword">var</span> days = <span class="number">10</span>;</span><br><span class="line">               <span class="keyword">var</span> ex = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">               ex.setTime(ex.getTime() + days * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line">               <span class="built_in">document</span>.cookie = name + <span class="string">"="</span> + value + <span class="string">";expires="</span> + ex;</span><br><span class="line">          &#125;,</span><br><span class="line">          getCookie: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">               <span class="keyword">var</span> a;</span><br><span class="line">               <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^|)"</span> + name + <span class="string">"=([^;]*)(;|$)"</span>);</span><br><span class="line">               <span class="keyword">if</span>(a = <span class="built_in">document</span>.cookie.match(reg)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> a[<span class="number">2</span>];</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>有以上四种方式可以自定义服务，不难发现第一种跟第四种都是通过service来封装服务，最常用的还是第四种，可以自己封装一些方法，使用的时候，注入tool,例如要使用setCookie方法，则tool.setCookie</p><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><table><thead><tr><th></th><th>平行路由</th><th>嵌套路由</th></tr></thead><tbody><tr><td>引入文件</td><td>angular-route.js</td><td>angular-ui-router.js</td></tr><tr><td>服务</td><td>$rootProvider</td><td>$stateProvider</td></tr><tr><td>参数的获取</td><td>$routeParams</td><td>$state</td></tr><tr><td>重定向</td><td>.otherwise({redirectTo:’/index’})</td><td>$urlRouterProvider.when(‘’,’/index/a’);</td></tr><tr><td>使用</td><td>ng-route</td><td>ui-route</td></tr></tbody></table><ul><li><p>平行路由写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">routes.config(<span class="function"><span class="keyword">function</span>(<span class="params">$routeProvider</span>)</span>&#123;</span><br><span class="line">     $routeProvider.when(<span class="string">'/index'</span>,&#123;</span><br><span class="line">          controller:<span class="string">'indexCtrl'</span>,</span><br><span class="line">          templateUrl:<span class="string">'index.html'</span></span><br><span class="line">     &#125;).when(<span class="string">'/home'</span>,&#123;</span><br><span class="line">          controller:<span class="string">'homeCtrl'</span>,</span><br><span class="line">          templateUrl:<span class="string">'home.html'</span></span><br><span class="line">          <span class="comment">// 通过路由来传参</span></span><br><span class="line">     &#125;).when(<span class="string">'/detail/:id/:skill'</span>,&#123;</span><br><span class="line">          <span class="comment">// M C 根据不同的控制器来diy每个模版</span></span><br><span class="line">          controller:<span class="string">'detailCtrl'</span>,</span><br><span class="line">          <span class="comment">// v 生成统一的模版</span></span><br><span class="line">          templateUrl:<span class="string">'detail.html'</span></span><br><span class="line">     &#125;).otherwise(&#123;</span><br><span class="line">          redirectTo:<span class="string">'/index'</span></span><br><span class="line">     &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>嵌套路由写法(spa单页面应用程序)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">routes.config(<span class="function"><span class="keyword">function</span>(<span class="params">$stateProvider,$urlRouterProvider</span>)</span>&#123;</span><br><span class="line">     <span class="comment">// 刷新进入默认路由，显示默认页面</span></span><br><span class="line">     $urlRouterProvider.when(<span class="string">''</span>,<span class="string">'/index/a'</span>);</span><br><span class="line">     $stateProvider.state(<span class="string">'index'</span>,&#123;</span><br><span class="line">          url:<span class="string">'/index'</span>,</span><br><span class="line">          templateUrl:<span class="string">'template/index.html'</span></span><br><span class="line">     &#125;).state(<span class="string">'index.a'</span>,&#123;</span><br><span class="line">          url:<span class="string">'/a'</span>,</span><br><span class="line">          template:<span class="string">'&lt;a href="#!/detail/3/ps"&gt;这是热点信息&lt;/a&gt;'</span>  <span class="comment">// 把要传的数据写在link上，通常是用ng-href</span></span><br><span class="line">     &#125;).state(<span class="string">'index.b'</span>,&#123;</span><br><span class="line">          url:<span class="string">'/b'</span>,</span><br><span class="line">          template:<span class="string">'&lt;p&gt;这是体育信息&lt;/p&gt;'</span></span><br><span class="line">     &#125;).state(<span class="string">'index.c'</span>,&#123;</span><br><span class="line">          url:<span class="string">'/c'</span>,</span><br><span class="line">          template:<span class="string">'&lt;p&gt;这是政治信息&lt;/p&gt;'</span></span><br><span class="line">     &#125;).state(<span class="string">'index.d'</span>,&#123;</span><br><span class="line">          url:<span class="string">'/d'</span>,</span><br><span class="line">          template:<span class="string">'&lt;p&gt;这是生活信息&lt;/p&gt;'</span></span><br><span class="line">     &#125;).state(<span class="string">'detail'</span>,&#123;</span><br><span class="line">          url:<span class="string">'/detail/:id/:skill'</span>,  <span class="comment">// 通过路由来传参</span></span><br><span class="line">          controller:<span class="string">'detailCtrl'</span>,</span><br><span class="line">          templateUrl:<span class="string">'template/detail.html'</span></span><br><span class="line">     &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h2 id="常见一些问题"><a href="#常见一些问题" class="headerlink" title="常见一些问题"></a>常见一些问题</h2><h3 id="http传参"><a href="#http传参" class="headerlink" title="$http传参"></a>$http传参</h3><p>get请求<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$http(&#123;</span><br><span class="line">method: <span class="string">'GET'</span>,</span><br><span class="line">url: <span class="string">'http://localhost:6789/'</span>,</span><br><span class="line">headers: &#123;</span><br><span class="line">     <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded;charset=utf-8'</span></span><br><span class="line">&#125;,</span><br><span class="line">params: &#123;</span><br><span class="line">     tableNum: scope.tablenum,</span><br><span class="line">     page: scope.page,</span><br><span class="line">     pagesize: scope.pageSize</span><br><span class="line">&#125;,</span><br><span class="line">transformRequest: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> str = [];</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> obj) &#123;</span><br><span class="line">      str.push(<span class="built_in">encodeURIComponent</span>(p) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(obj[p]));</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> str.join(<span class="string">"&amp;"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(data.data.data);</span><br><span class="line">     scope.banner = data.data.data;</span><br><span class="line">     scope.isShow--;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>通过$http发起的ajax请求，遇到无法将参数传到后端的时候，可以设置headers:{‘Content-Type’: ‘application/x-www-form-urlencoded;charset=utf-8’},并创建 transformRequest函数，更改数据为json格式，使后端能够识别</p><h3 id="组件与组件之间的通信"><a href="#组件与组件之间的通信" class="headerlink" title="组件与组件之间的通信"></a>组件与组件之间的通信</h3><ul><li>封装服务来共享数据</li><li>$broadcaste(下) $emit(上) $on(接收)</li><li>localstorage/sessionstorage</li><li>在组件中注入$rootScope,通过全局变量来共享数据</li></ul><h3 id="组件中不同模版的DIY方法"><a href="#组件中不同模版的DIY方法" class="headerlink" title="组件中不同模版的DIY方法"></a>组件中不同模版的DIY方法</h3><ul><li>ng-transclude</li><li>利用link中的attr，根据attr来设定组件的css样式</li><li>ng-show/ng-hide/ng-if 利用attr来做判断</li><li>ng-class/ng-style 同上</li></ul><h3 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-controller</span>=<span class="string">"indexCtrl"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"a in arr"</span> <span class="attr">ng-click</span>=<span class="string">"Click($index)"</span>&gt;</span>&#123;&#123;a&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span> // 通过$index获取每个节点的索引</span><br><span class="line">     <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">ul</span> <span class="attr">ng-click</span>=<span class="string">"Click2($event)"</span>&gt;</span> // 通过$event来获取事件源对象</span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"a in arr"</span>&gt;</span>&#123;&#123;a&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line">     <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = angular.module(<span class="string">"ngApp"</span>, []);</span><br><span class="line">app.controller(<span class="string">"indexCtrl"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>) </span>&#123;</span><br><span class="line">     $scope.arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</span><br><span class="line">     $scope.Click = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(num)</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     $scope.Click2 = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(e.target)</span><br><span class="line">          angular.element(e.target).css(<span class="string">"color"</span>,<span class="string">"red"</span>)</span><br><span class="line">     &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="多个ajax请求的解决方案"><a href="#多个ajax请求的解决方案" class="headerlink" title="多个ajax请求的解决方案"></a>多个ajax请求的解决方案</h3><p>利用数字0的bool值为false,其他数字为true<br>scope.show = 0;<br>发起一次请求scope.show++,<br>完成一次请求scope.show–,<br>当存在请求失败的情况时，通过条件判断if(scope.show !==0){scope.show = 0},跳过这个请求<br>配合$timeout(function(){},1000);使加载的动画出现1秒后才消失</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自己从项目中获取的经验，欢迎大家提意见，相互学习，在用angular写项目的时候，通常会将controller,directive,filter,service,route分别定义成相应的模块，分成5个js文件来写，方便我们进行维护,&lt;br&gt;&lt;a href=&quot;https://docs.angularjs.org/api&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;查看官方文档&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;angular基础&quot;&gt;&lt;a href=&quot;#angular基础&quot; class=&quot;headerlink&quot; title=&quot;angular基础&quot;&gt;&lt;/a&gt;angular基础&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;控制器&lt;/th&gt;
&lt;th&gt;指令/组件&lt;/th&gt;
&lt;th&gt;过滤器&lt;/th&gt;
&lt;th&gt;服务&lt;/th&gt;
&lt;th&gt;路由&lt;/th&gt;
&lt;th&gt;脏检测机制&lt;/th&gt;
&lt;th&gt;双向数据绑定&lt;/th&gt;
&lt;th&gt;依赖注入&lt;/th&gt;
&lt;th&gt;表达式&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;controller&lt;/td&gt;
&lt;td&gt;directive&lt;/td&gt;
&lt;td&gt;filter&lt;/td&gt;
&lt;td&gt;service&lt;/td&gt;
&lt;td&gt;route&lt;/td&gt;
&lt;td&gt;dirty check&lt;/td&gt;
&lt;td&gt;data binding&lt;/td&gt;
&lt;td&gt;dependency injection&lt;/td&gt;
&lt;td&gt;在指令中不需要使用&lt;code&gt;{&lt;/code&gt;{ }&lt;code&gt;}&lt;/code&gt;表达式，指令中的变量直接写，加单引号则表示字符&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Javascript中的apply和call继承</title>
    <link href="http://yoursite.com/2017/08/18/call&amp;apply/"/>
    <id>http://yoursite.com/2017/08/18/call&amp;apply/</id>
    <published>2017-08-18T02:14:09.000Z</published>
    <updated>2017-08-09T07:59:51.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="call实现继承"><a href="#call实现继承" class="headerlink" title="call实现继承"></a>call实现继承</h2><p>call这里call的意思就是把animal的方法应用到cat这个对象身上，也就是animal的属性创建到了cat里面,所以cat就继承了animal的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function animal(a, b) &#123;</span><br><span class="line">            this.type = &apos;animal&apos;</span><br><span class="line">            this.behavior = function()&#123;</span><br><span class="line">                console.log(this.type+&quot; is running&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        function cat(a, b) &#123;</span><br><span class="line">            this.name = &apos;wsscat&apos;</span><br><span class="line">            //这里call的意思就是把animal的方法应用到cat这个对象身上</span><br><span class="line">            //所以cat就继承了animal的方法</span><br><span class="line">            animal.call(this);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        console.log(new cat())</span><br></pre></td></tr></table></figure><a id="more"></a><p><a href="https://cloud.githubusercontent.com/assets/17243165/18807350/22b89724-8277-11e6-9632-1434325ac531.png" target="_blank" rel="noopener"><img src="https://cloud.githubusercontent.com/assets/17243165/18807350/22b89724-8277-11e6-9632-1434325ac531.png" alt=""></a></p><h2 id="call实现多重继承"><a href="#call实现多重继承" class="headerlink" title="call实现多重继承"></a>call实现多重继承</h2><p>当然我们可以继承多个构造函数，这就是多重继承</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function animal(a, b) &#123;</span><br><span class="line">            this.type = &apos;animal&apos;</span><br><span class="line">            this.behavior = function()&#123;</span><br><span class="line">                console.log(this.type+&quot; is running&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        function wsscat(a, b) &#123;</span><br><span class="line">            this.age = 0</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        function cat(a, b) &#123;</span><br><span class="line">            this.name = &apos;wsscat&apos;</span><br><span class="line">            //这里call的意思就是把animal的方法应用到cat这个对象身上</span><br><span class="line">            //所以cat就继承了animal的方法</span><br><span class="line">            animal.call(this);</span><br><span class="line">            wsscat.call(this);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        console.log(new cat())</span><br></pre></td></tr></table></figure><p><a href="https://cloud.githubusercontent.com/assets/17243165/18815297/9fb1ec3e-835e-11e6-8833-bb8088d8d8ae.png" target="_blank" rel="noopener"><img src="https://cloud.githubusercontent.com/assets/17243165/18815297/9fb1ec3e-835e-11e6-8833-bb8088d8d8ae.png" alt=""></a></p><p>只要在cat的构造函数中有多个call就可以，此时的cat继承了wsscat和animal</p><h2 id="apply和call的区别"><a href="#apply和call的区别" class="headerlink" title="apply和call的区别"></a>apply和call的区别</h2><p>其实apply和call这两个方法基本上是差不多的，区别在于call的第二个参数可以是任意类型，而apply的第二个参数必须是数组，也可以是arguments（即传给构造函数的参数）</p><p>例如我们把上面的代码稍微改一下，如果此时我在new构造函数cat的时候传入参数<code>new cat(&#39;wsscat&#39;,&#39;cute&#39;)</code>我们的cat能接收arguments，但是如果此时继承是<code>animal.call(this)</code>，没有给call传第二个参数的时候，生成的对象中type的值就会是undefined，所以为了让这个值能够让animal接收，我们可以在animal中传入第二个参数animal.call(this,type)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function animal(type) &#123;</span><br><span class="line">            this.type = type</span><br><span class="line">            this.behavior = function()&#123;</span><br><span class="line">                console.log(this.type+&quot; is running&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">        function cat(name, type) &#123;</span><br><span class="line">            this.name = name</span><br><span class="line">            //这里call的意思就是把animal的方法应用到cat这个对象身上</span><br><span class="line">            //所以cat就继承了animal的方法</span><br><span class="line">            //animal.call(this);//type undefined</span><br><span class="line">            //animal.call(this,type);//type cute</span><br><span class="line">            //animal.call(this,arguments[1]);//type cute</span><br><span class="line">            //animal.call(this,arguments);//type [&apos;wsscat&apos;,&apos;cute&apos;]</span><br><span class="line">            animal.apply(this,arguments)//type: wsscat</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        console.log(new cat(&apos;wsscat&apos;,&apos;cute&apos;))</span><br></pre></td></tr></table></figure><p><strong>这里用apply就很方便，因为arguments是数组，可以全部传给animal，而call就要一个个地传过去</strong></p><ul><li>animal.call(this);//type undefined</li><li>animal.call(this,type);//type cute</li><li>animal.call(this,arguments[1]);//type cute</li><li>animal.call(this,arguments);//type [‘wsscat’,’cute’]</li><li>animal.apply(this,arguments)//type: wsscat</li></ul><h2 id="继承的优化"><a href="#继承的优化" class="headerlink" title="继承的优化"></a>继承的优化</h2><p>如果构造函数this绑定太多属性（比如一些共同方法），在实例化后会造成浪费，为此我们一般会使用原型链来优化，但是使用原型链之后我们的apply和call的继承方法就会失效<br>为此我们一般使用混合的写法，使用原型链和(apply或者call)方法进行继承<br>具体两句话<br>让子的原型链指向父的实例（父实例化的对象）<br><code>cat.prototype = new animal();</code><br>让父的属性创建在子的this上<br><code>animal.call(this, type)</code><br>整体代码如下，那么就会让父原型链的属性和this上的属性都得到继承</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function animal(type) &#123;</span><br><span class="line">            this.type = type</span><br><span class="line">            this.behavior = function() &#123;</span><br><span class="line">                console.log(this.type + &quot; is running&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        animal.prototype.action = function() &#123;</span><br><span class="line">            console.log(&quot;running&quot;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        function cat(name, type) &#123;</span><br><span class="line">            this.name = name</span><br><span class="line">            animal.call(this, type)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cat.prototype = new animal();</span><br><span class="line">        console.log(new cat(&apos;wsscat&apos;, &apos;cute&apos;));</span><br><span class="line">        (new cat(&apos;wsscat&apos;)).action() //running</span><br></pre></td></tr></table></figure><p><a href="https://cloud.githubusercontent.com/assets/17243165/18815677/fde42082-8369-11e6-979d-580453904414.png" target="_blank" rel="noopener"><img src="https://cloud.githubusercontent.com/assets/17243165/18815677/fde42082-8369-11e6-979d-580453904414.png" alt=""></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;call实现继承&quot;&gt;&lt;a href=&quot;#call实现继承&quot; class=&quot;headerlink&quot; title=&quot;call实现继承&quot;&gt;&lt;/a&gt;call实现继承&lt;/h2&gt;&lt;p&gt;call这里call的意思就是把animal的方法应用到cat这个对象身上，也就是animal的属性创建到了cat里面,所以cat就继承了animal的方法&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function animal(a, b) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            this.type = &amp;apos;animal&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            this.behavior = function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                console.log(this.type+&amp;quot; is running&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        function cat(a, b) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            this.name = &amp;apos;wsscat&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //这里call的意思就是把animal的方法应用到cat这个对象身上&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //所以cat就继承了animal的方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            animal.call(this);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        console.log(new cat())&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
